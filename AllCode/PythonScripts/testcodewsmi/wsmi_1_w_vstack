import numpy as np
import mne
import pickle
import matplotlib.pyplot as plt
from nice.algorithms.connectivity import epochs_compute_wsmi
np.set_printoptions(threshold=900)  # Default threshold

file_path = 'C:/Users/joshu/PartIIIProject/RSNNdale_attention_1_attention_test'
data = pickle.load(open(file_path, 'rb'))

left_input_SP = data['SP'][0][0] 
right_input_SP = data['SP'][0][1]
attention_SP = data['SP'][0][2]
label_left = data['label_left'][0]
label_right = data['label_right'][0]
# left_input_SP (2032, 500, 160)
# right_input_SP (2032, 500, 160)
# attention_SP (2032, 500, 80)
 

# attend_left_not_omitted = np.where((data["attend"][0] == 0) & (data["omit"][0] == 0) & (label_left != label_right))[0]
# attend_right_not_omitted = np.where((data["attend"][0] == 1) & (data["omit"][0] == 0) & (label_left != label_right))[0]

attend_left_not_omitted = np.where((data["attend"][0] == 0) & (data["omit"][0] == 0))[0]
attend_right_not_omitted = np.where((data["attend"][0] == 1) & (data["omit"][0] == 0))[0]

left_input_attendingleft_t = left_input_SP[attend_left_not_omitted, 100:350, :]
right_input_attendingleft_t = right_input_SP[attend_left_not_omitted, 100:350, :]
attention_layer_attendingleft_t = attention_SP[attend_left_not_omitted, 100:350, :]

left_input_attendingright_t = left_input_SP[attend_right_not_omitted, 100:350, :]
right_input_attendingright_t = right_input_SP[attend_right_not_omitted, 100:350, :]
attention_layer_attendingright_t = attention_SP[attend_right_not_omitted, 100:350, :]

#eft_input_attendingleft_t (468, 250, 160) (80 for attention)
#left_input_attendingright_t (536, 250, 160) (80 for attention)

from scipy.ndimage import gaussian_filter1d

def smooth_with_gaussian(data, sigma=3):
    return gaussian_filter1d(data, sigma=sigma, axis=1) 

sigma = 2

left_in_attleft_sm = smooth_with_gaussian(left_input_attendingleft_t, sigma=sigma) 
right_in_attleft_sm = smooth_with_gaussian(right_input_attendingleft_t, sigma=sigma) 
attlay_attleft_sm = smooth_with_gaussian(attention_layer_attendingleft_t, sigma=sigma) 

left_in_attright_sm = smooth_with_gaussian(left_input_attendingright_t, sigma=sigma) 
right_in_attright_sm = smooth_with_gaussian(right_input_attendingright_t, sigma=sigma)
attlay_attright_sm = smooth_with_gaussian(attention_layer_attendingright_t, sigma=sigma)

#print shapes of each
print("left_in_attleft_sm", left_in_attleft_sm.shape)
print("right_in_attleft_sm", right_in_attleft_sm.shape)
print("attlay_attleft_sm", attlay_attleft_sm.shape)

print("=== Initial Smoothed Data ===")
print("left_in_attleft_sm shape:", left_in_attleft_sm.shape)
print("right_in_attleft_sm shape:", right_in_attleft_sm.shape)
print("attlay_attleft_sm shape:", attlay_attleft_sm.shape)

print("\nSnippet from left_in_attleft_sm (Trial 0, first 3 timepoints, first 5 neurons):")
print(left_in_attleft_sm[0, :, :5])

num_trials_left, num_samples, num_neurons_left = left_input_attendingleft_t.shape
num_trials_right = left_input_attendingright_t.shape[0]
num_neurons_attention = 80

           
for j in range(0, num_trials_left):
    for i in range(0, num_neurons_left):
        count_left = np.count_nonzero(left_input_attendingleft_t[j, :, i] == 1)
        if count_left > 0:
            left_in_attleft_sm[j, :, i] /= count_left
        count_right = np.count_nonzero(right_input_attendingleft_t[j, :, i] == 1)
        if count_right > 0:
            right_in_attleft_sm[j, :, i] /= count_right


    for i in range(0, num_neurons_attention):
        count_attention = np.count_nonzero(attention_layer_attendingleft_t[j, :, i] == 1)
        if count_attention > 0:
            attlay_attleft_sm[j, :, i] /= count_attention



for j in range(0, num_trials_right):
    for i in range(0, num_neurons_left):
        count_left = np.count_nonzero(left_input_attendingright_t[j, :, i] == 1)
        if count_left > 0:
            left_in_attright_sm[j, :, i] /= count_left
        count_right = np.count_nonzero(right_input_attendingright_t[j, :, i] == 1)
        if count_right > 0:
            right_in_attright_sm[j, :, i] /= count_right    

    for i in range(0, num_neurons_attention):
        count_attention = np.count_nonzero(attention_layer_attendingright_t[j, :, i] == 1)
        if count_attention > 0:
            attlay_attright_sm[j, :, i] /= count_attention


     

left_in_attleft_sum = np.sum(left_in_attleft_sm, axis=2)
right_in_attleft_sum = np.sum(right_in_attleft_sm, axis=2)
attlay_attleft_sum = np.sum(attlay_attleft_sm, axis=2)

left_in_attright_sum = np.sum(left_in_attright_sm, axis=2)
right_in_attright_sum = np.sum(right_in_attright_sm, axis=2)
attlay_attright_sum = np.sum(attlay_attright_sm, axis=2)


n_samples = left_in_attleft_sum.shape[1]   ##change this for correct time 
print("n_samples:", n_samples)

dt = 0.002
sfreq = 1 / dt  # Sampling frequency

ch_names = ['left_input', 'right_input', 'attention_layer']
ch_types = ['eeg', 'eeg', 'eeg']
info = mne.create_info(ch_names=ch_names, sfreq=sfreq, ch_types=ch_types)

print("Left shape:", left_in_attleft_sum.shape)
print("Right shape:", right_in_attleft_sum.shape)
print("Attention shape:", attlay_attleft_sum.shape)


raw_data_left = np.vstack([
    left_in_attleft_sum.reshape(1, -1),
    right_in_attleft_sum.reshape(1, -1),
    attlay_attleft_sum.reshape(1, -1)
])

print("raw data left shape:", raw_data_left.shape)
print("\nSnippet from raw_data_left (first 5 columns):")
print(raw_data_left[:, :5])

raw_data_right = np.vstack([
    left_in_attright_sum.reshape(1, -1),
    right_in_attright_sum.reshape(1, -1),
    attlay_attright_sum.reshape(1, -1)
])

print("raw data right shape:", raw_data_right.shape)
print("\nSnippet from raw_data_right (first 5 columns):")
print(raw_data_right[:, :5])

raw_left = mne.io.RawArray(raw_data_left, info)
raw_right = mne.io.RawArray(raw_data_right, info)


# events_left = np.array([[(i * n_samples), 0, 1] for i in range(len(attend_left_not_omitted))])
# events_right = np.array([[i * n_samples, 0, 1] for i in range(len(attend_right_not_omitted))])

events_left = mne.make_fixed_length_events(raw_left, duration=0.5)
events_right = mne.make_fixed_length_events(raw_right, duration=0.5)
print("Events left shape:", events_left.shape)
print("Events right shape:", events_right.shape)
print("Events left:", events_left[:])
print("Events right:", events_right[:])


epochs_left = mne.Epochs(raw_left, events_left, event_id={'Trial': 1}, tmin = 0.1, tmax = 0.35, detrend = 1,  baseline=None, preload=True)
epochs_right = mne.Epochs(raw_right, events_right, event_id={'Trial': 1}, tmin = 0.1, tmax = 0.35, detrend = 1, baseline=None, preload=True)
print(epochs_right.times)
epochs_right.plot(n_epochs=5, n_channels = 3, scalings='auto')
plt.show()


#wSMI for each condition
kernel = 3
taus = [8, 16, 32, 64]  # in ms
wsmi_results = {'left': {}, 'right': {}}


print(f"tau_samples for {taus}: {[int(t / (1000 / sfreq)) for t in taus]}")

for tau_ms in taus:
    tau_samples = int(tau_ms / (1000 / sfreq))  # Convert ms to samples
    

    #wSMI for attention left
    wsmi_left, _, _, _ = epochs_compute_wsmi(
        epochs_left, kernel=kernel, tau=tau_samples, backend='python', method_params={'bypass_csd': True}
    )
    wsmi_results['left'][tau_ms] = wsmi_left
    

    #wSMI for attention right
    wsmi_right, _, _, _ = epochs_compute_wsmi(
        epochs_right, kernel=kernel, tau=tau_samples, backend='python', method_params={'bypass_csd': True}
    )
    wsmi_results['right'][tau_ms] = wsmi_right



wsmi_left_input_attleft = []  #wSMI for left input vs attention layer (attention left)
wsmi_right_input_attleft = []  #wSMI for right input vs attention layer (attention left)
wsmi_left_input_attright = []  #wSMI for left input vs attention layer (attention right)
wsmi_right_input_attright = []  #wSMI for right input vs attention layer (attention right)

#average wSMI for each τ for each condition
for tau in taus:
    # For attention left
    wsmi_left_input_attleft.append(np.mean(wsmi_results['left'][tau][0, 2, :]))  # Left input vs attention layer
    wsmi_right_input_attleft.append(np.mean(wsmi_results['left'][tau][1, 2, :]))  # Right input vs attention layer

    # For attention right
    wsmi_left_input_attright.append(np.mean(wsmi_results['right'][tau][0, 2, :]))  # Left input vs attention layer
    wsmi_right_input_attright.append(np.mean(wsmi_results['right'][tau][1, 2, :]))  # Right input vs attention layer



# Plotting trials 1 to 5 on separate subplots within the same figure
fig, axs = plt.subplots(5, 1, figsize=(10, 15), sharex=True)

t = np.arange(100, 350)
for trial_index in range(5):
    axs[trial_index].plot(t, left_in_attleft_sum[trial_index], label='Left Input', color='r', alpha=0.6)
    axs[trial_index].plot(t, right_in_attleft_sum[trial_index], label='Right Input', color='b', alpha=0.6)
    axs[trial_index].plot(t, attlay_attleft_sum[trial_index], label='Attention Layer', color='g', alpha=0.6)
    axs[trial_index].set_title(f'Trial {trial_index + 1}')
    axs[trial_index].set_ylabel('Sum of Inputs')
    axs[trial_index].legend()

axs[-1].set_xlabel('Time (ms)')
plt.tight_layout()
plt.show()




fig, axs = plt.subplots(1, 2, figsize=(12, 6), sharey=True)

#left subplot
axs[0].scatter(taus, wsmi_left_input_attleft, label="Left Input vs Attention Layer", marker="x",color = 'r', s=100)
axs[0].scatter(taus, wsmi_right_input_attleft, label="Right Input vs Attention Layer", marker="x",color = 'k', s=100)
axs[0].set_title("Attention Left", fontsize=14)
axs[0].set_xlabel("τ (ms)", fontsize=12)
axs[0].set_ylabel("Average wSMI", fontsize=12)
axs[0].legend()
axs[0].grid(False)

#right subplot
axs[1].scatter(taus, wsmi_left_input_attright, label="Left Input vs Attention Layer", marker="x", color = 'r', s=100)
axs[1].scatter(taus, wsmi_right_input_attright, label="Right Input vs Attention Layer", marker="x",color = 'k', s=100)
axs[1].set_title("Attention Right", fontsize=14)
axs[1].set_xlabel("τ (ms)", fontsize=12)
axs[1].legend()
axs[1].grid(False)

plt.tight_layout()
plt.show()

results = {'left': [], 'right': []}

for tau in taus:
    if wsmi_left_input_attleft[taus.index(tau)] > wsmi_right_input_attleft[taus.index(tau)]:
        results['left'].append(0)
    else:
        results['left'].append(1)

    if wsmi_left_input_attright[taus.index(tau)] > wsmi_right_input_attright[taus.index(tau)]:
        results['right'].append(0)
    else:
        results['right'].append(1)

print("Results:", results)